services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - '80:80'
    volumes:
      - ./hosts/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../webapp:/var/www/html:ro
    depends_on:
      - webapp

  # Laravel web application (admin portal & validation page)
  webapp:
    build:
      context: ../webapp
      dockerfile: Dockerfile
    container_name: webapp
    restart: unless-stopped
    expose:
      - '80'
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - ../webapp:/var/www/html

  # MySQL for metadata
  db:
    image: mysql:8.0
    container_name: db
    restart: unless-stopped
    ports:
      - '3306:3306'
    env_file:
      - .env
    volumes:
      - db_data:/var/lib/mysql

  # Redis for caching and temporary data
  redis:
    image: redis:6-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data

  # RabbitMQ for task queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: rabbit
      RABBITMQ_LOAD_DEFINITIONS: /etc/rabbitmq/definitions.json
    volumes:
      - ./rabbit/definitions.json:/etc/rabbitmq/definitions.json
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Content Indexer Worker (Go service)
  content-indexer:
    build:
      context: ../content-indexer
      dockerfile: Dockerfile
    container_name: content-indexer
    restart: unless-stopped
    env_file:
      - ../content-indexer/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started

  adminer:
    image: adminer
    restart: always
    environment:
      ADMINER_DEFAULT_DB_DRIVER: mysql
      ADMINER_DEFAULT_DB_HOST: db
    ports:
      - 8080:8080

  mailhog:
    image: mailhog/mailhog
    container_name: 'mailhog'
    ports:
      - "1025:1025"
      - "8025:8025"

volumes:
  db_data:
  redis_data:
